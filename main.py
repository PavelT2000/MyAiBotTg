import os
import logging
import asyncio
from io import BytesIO
from typing import Optional
from functools import lru_cache

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import openai
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker

from config import config
from models import Base, UserValue

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.AsyncOpenAI(api_key=config.OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(config.DATABASE_URL, echo=True, connect_args={"server_settings": {"application_name": "voice_values_bot"}})
async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def create_assistant():
    logger.info("create assistant used")
    try:
        assistant = await client.beta.assistants.create(
            name="Voice and Values Assistant",
            instructions="""
            –í—ã –ø–æ–ª–µ–∑–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –µ–≥–æ –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥.
            –ù–∞—á–Ω–∏—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–∞: '–ß—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –≤ –∂–∏–∑–Ω–∏? –ù–∞–∑–æ–≤–∏ –æ–¥–Ω—É —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–º—å—è, —Å–≤–æ–±–æ–¥–∞, —É—Å–ø–µ—Ö).'
            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—ë—Ç –Ω–µ—è—Å–Ω—ã–π –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫ –¥–µ–ª—É –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—Ä–∏–≤–µ—Ç', '–ø–æ–∫–∞', '–Ω–µ –∑–Ω–∞—é'), –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–∞–∫–∏–µ –∫–∞–∫: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–∞.'
            –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç —á—ë—Ç–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–º—å—è', '—Å–≤–æ–±–æ–¥–∞', '—É—Å–ø–µ—Ö'), –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é save_value —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º value, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —ç—Ç—É —Ü–µ–Ω–Ω–æ—Å—Ç—å.
            –ù–µ –≤—ã–∑—ã–≤–∞–π—Ç–µ save_value, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.
            –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è TTS.
            """,
            model="gpt-4o",
            tools=[
                {
                    "type": "function",
                    "function": {
                        "name": "save_value",
                        "description": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string",
                                    "description": "–¶–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–º—å—è', '—Å–≤–æ–±–æ–¥–∞', '—É—Å–ø–µ—Ö')"
                                }
                            },
                            "required": ["value"]
                        }
                    }
                }
            ]
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å ID: {assistant.id}")
        print(f"!!! –í–ê–ñ–ù–û: –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Å–ª–µ–¥—É—é—â–∏–π ASSISTANT_ID: {assistant.id}")
        return assistant.id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def verify_or_create_assistant():
    logger.info("verify or create assistant handler used")
    try:
        assistant = await client.beta.assistants.retrieve(config.ASSISTANT_ID)
        logger.info(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {assistant.name}")
        return config.ASSISTANT_ID
    except openai.NotFoundError:
        logger.warning(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å ID {config.ASSISTANT_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")
        new_assistant_id = await create_assistant()
        config.ASSISTANT_ID = new_assistant_id
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π ASSISTANT_ID: {new_assistant_id}")
        return new_assistant_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        raise

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Completions API —Å functools
@lru_cache(maxsize=100)
async def validate_value_cached(value: str) -> bool:
    logger.info("validate value used")
    try:
        if not value or not isinstance(value, str) or len(value.strip()) == 0:
            return False
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–í—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. –í–µ—Ä–Ω–∏—Ç–µ 'true' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–º—å—è', '—Å–≤–æ–±–æ–¥–∞', '—É—Å–ø–µ—Ö'), –∏ 'false' –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö (–ø—É—Å—Ç—ã–µ, –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ –±—Ä–µ–¥). –û—Ç–≤–µ—Ç—å—Ç–µ —Ç–æ–ª—å–∫–æ 'true' –∏–ª–∏ 'false'."},
                {"role": "user", "content": value}
            ],
            max_tokens=1
        )
        is_valid = response.choices[0].message.content.strip().lower() == "true"
        logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏ '{value}': {is_valid}")
        return is_valid
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        return False

async def save_value(user_id: int, value: str):
    logger.info("save value used")
    async with async_session() as session:
        async with session.begin():
            try:
                is_valid = await validate_value_cached(value)  # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                if not is_valid:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {value}")
                    return False, "–¶–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É."
                
                new_value = UserValue(user_id=user_id, value=value)
                session.add(new_value)
                await session.commit()
                logger.info(f"–¶–µ–Ω–Ω–æ—Å—Ç—å '{value}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True, "–¶–µ–Ω–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
            except Exception as e:
                await session.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
                return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏."

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ü–æ–º–æ—â—å")
    builder.button(text="–û –±–æ—Ç–µ")
    builder.button(text="–ú–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
    return builder.as_markup(resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö
class ValuesState(StatesGroup):
    waiting_for_value = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def start_handler(message: Message):
    logger.info("start handler used")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π /values, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å —Ç–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
        reply_markup=get_main_keyboard()
    )
@dp.message(Command("values"))
async def values_handler(message: Message, state: FSMContext):
    logger.info("values handler used")
    await state.set_state(ValuesState.waiting_for_value)
    thread = await client.beta.threads.create()
    await state.update_data(thread_id=thread.id)
    await message.answer("–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –≤ –∂–∏–∑–Ω–∏? –ù–∞–∑–æ–≤–∏ –æ–¥–Ω—É —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –æ–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ü–µ–Ω–∏—à—å.")

@dp.message(ValuesState.waiting_for_value, F.text | F.voice)
async def process_value(message: Message, state: FSMContext):
    try:
        user_question = ""
        if message.voice:
            voice_file = await bot.get_file(message.voice.file_id)
            voice_data = await bot.download_file(voice_file.file_path)
            transcript = await client.audio.transcriptions.create(
                file=("voice.ogg", BytesIO(voice_data.read()), "audio/ogg"),
                model="whisper-1"
            )
            user_question = transcript.text
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_question}")
            await message.answer(f"üé§ –í–∞—à –æ—Ç–≤–µ—Ç: {user_question}")
        else:
            user_question = message.text

        data = await state.get_data()
        thread_id = data.get("thread_id")

        await client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_question
        )

        run = await client.beta.threads.runs.create_and_poll(
            thread_id=thread_id,
            assistant_id=config.ASSISTANT_ID
        )

        if run.status == "requires_action" and run.required_action and run.required_action.submit_tool_outputs:
            logger.info(f"–°—Ç–∞—Ç—É—Å requires_action, tool_calls: {run.required_action.submit_tool_outputs.tool_calls}")
            for tool_call in run.required_action.submit_tool_outputs.tool_calls:
                if tool_call.function.name == "save_value":
                    logger.info(f"–í—ã–∑–æ–≤ save_value —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {tool_call.function.arguments}")
                    import json
                    try:
                        arguments = json.loads(tool_call.function.arguments)
                        value = arguments.get("value")
                        if not value or not isinstance(value, str) or not value.strip():
                            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ value: {value}")
                            await message.answer("–¶–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ.")
                            return
                        logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {value}")
                        success, response = await save_value(message.from_user.id, value)
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç save_value: success={success}, response={response}")
                        await client.beta.threads.runs.submit_tool_outputs(
                            thread_id=thread_id,
                            run_id=run.id,
                            tool_outputs=[{"tool_call_id": tool_call.id, "output": json.dumps({"success": success, "message": response})}]
                        )
                        await message.answer(response)
                        if success:
                            await state.clear()
                        return
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
                        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        await state.clear()
                        return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ tool_call: {e}", exc_info=True)
                        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        await state.clear()
                        return
        elif run.status != "completed":
            raise Exception(f"Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, —Å—Ç–∞—Ç—É—Å: {run.status}")

        messages = await client.beta.threads.messages.list(thread_id=thread_id)
        for msg in messages.data:
            if msg.role == "assistant" and msg.content[0].type == "text":
                assistant_response = msg.content[0].text.value
                logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant_response}")
                await message.answer(assistant_response)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω–Ω–æ—Å—Ç—å.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()



@dp.message(F.text)
async def text_handler(message: Message, state: FSMContext):
    logger.info("text handler used")
    if message.text.lower() == "–ø–æ–º–æ—â—å":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /values –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.")
    elif message.text.lower() == "–æ –±–æ—Ç–µ":
        await message.answer("–Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ OpenAI API —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.")
    elif message.text.lower() == "–º–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏":
        async with async_session() as session:
            result = await session.execute(
                "SELECT value FROM user_values WHERE user_id = :user_id",
                {"user_id": message.from_user.id}
            )
            values = result.fetchall()
            if values:
                values_list = [row[0] for row in values]
                await message.answer(f"–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(values_list)}")
            else:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /values, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö.")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ /values.")

@dp.message(F.voice)
async def voice_handler(message: Message):
    logger.info("voice handler used")
    try:
        voice_file = await bot.get_file(message.voice.file_id)
        voice_data = await bot.download_file(voice_file.file_path)
        
        transcript = await client.audio.transcriptions.create(
            file=("voice.ogg", BytesIO(voice_data.read()), "audio/ogg"),
            model="whisper-1"
        )
        user_question = transcript.text
        await message.answer(f"üé§ –í–∞—à –≤–æ–ø—Ä–æ—Å: {user_question}")

        thread = await client.beta.threads.create()
        await client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=user_question
        )
        
        run = await client.beta.threads.runs.create_and_poll(
            thread_id=thread.id,
            assistant_id=config.ASSISTANT_ID
        )
        
        if run.status == "requires_action" and run.required_action and run.required_action.submit_tool_outputs:
            logger.info(f"–°—Ç–∞—Ç—É—Å requires_action, tool_calls: {run.required_action.submit_tool_outputs.tool_calls}")
            for tool_call in run.required_action.submit_tool_outputs.tool_calls:
                if tool_call.function.name == "save_value":
                    logger.info(f"–í—ã–∑–æ–≤ save_value —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {tool_call.function.arguments}")
                    import json
                    try:
                        arguments = json.loads(tool_call.function.arguments)
                        value = arguments.get("value")
                        if not value or not isinstance(value, str) or not value.strip():
                            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ value: {value}")
                            await message.answer("–¶–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ.")
                            return
                        logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {value}")
                        success, response = await save_value(message.from_user.id, value)
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç save_value: success={success}, response={response}")
                        await client.beta.threads.runs.submit_tool_outputs(
                            thread_id=thread.id,
                            run_id=run.id,
                            tool_outputs=[{"tool_call_id": tool_call.id, "output": json.dumps({"success": success, "message": response})}]
                        )
                        await message.answer(response)
                        return
                    except json.JSONDecodeError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
                        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ tool_call: {e}", exc_info=True)
                        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        return
        elif run.status != "completed":
            raise Exception(f"Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, —Å—Ç–∞—Ç—É—Å: {run.status}")
        
        messages = await client.beta.threads.messages.list(thread_id=thread.id)
        assistant_response = next(m.content[0].text.value for m in messages.data if m.role == "assistant")

        speech = await client.audio.speech.create(
            model="tts-1",
            voice="alloy",
            input=assistant_response
        )
        
        await message.answer_voice(
            types.BufferedInputFile((await speech.aread()), filename="response.mp3")
        )
        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç: {assistant_response}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    await verify_or_create_assistant()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())