import logging
import asyncio
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.sql import text

from config import config
from database import init_db, save_value_to_db
from services import OpenAIService

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine, async_session = init_db(config.DATABASE_URL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ OpenAI
openai_service = OpenAIService(config.OPENAI_API_KEY)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ü–æ–º–æ—â—å")
    builder.button(text="–û –±–æ—Ç–µ")
    builder.button(text="–ú–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
    return builder.as_markup(resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö
class ValuesState(StatesGroup):
    waiting_for_value = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def start_handler(message: Message):
    logger.info("start handler used")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π /values, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å —Ç–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("values"))
async def values_handler(message: Message, state: FSMContext):
    logger.info("values handler used")
    await state.set_state(ValuesState.waiting_for_value)
    thread = await openai_service.client.beta.threads.create()
    await state.update_data(thread_id=thread.id)
    await message.answer("–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –≤ –∂–∏–∑–Ω–∏? –ù–∞–∑–æ–≤–∏ –æ–¥–Ω—É —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –æ–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ü–µ–Ω–∏—à—å.")

@dp.message(ValuesState.waiting_for_value, F.text | F.voice)
async def process_value(message: Message, state: FSMContext):
    try:
        user_question = ""
        if message.voice:
            voice_file = await bot.get_file(message.voice.file_id)
            voice_data = await bot.download_file(voice_file.file_path)
            transcript = await openai_service.client.audio.transcriptions.create(
                file=("voice.ogg", BytesIO(voice_data.read()), "audio/ogg"),
                model="whisper-1"
            )
            user_question = transcript.text
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_question}")
            await message.answer(f"üé§ –í–∞—à –æ—Ç–≤–µ—Ç: {user_question}")
        else:
            user_question = message.text

        data = await state.get_data()
        thread_id = data.get("thread_id")

        await openai_service.client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_question
        )

        run = await openai_service.client.beta.threads.runs.create_and_poll(
            thread_id=thread_id,
            assistant_id=config.ASSISTANT_ID
        )

        if run.status == "requires_action" and run.required_action and run.required_action.submit_tool_outputs:
            logger.info(f"–°—Ç–∞—Ç—É—Å requires_action, tool_calls: {run.required_action.submit_tool_outputs.tool_calls}")
            value, error = await openai_service.handle_tool_outputs(thread_id, run)
            if value:
                async with async_session() as session:
                    success, response = await save_value_to_db(session, message.from_user.id, value)
                    await openai_service.submit_tool_output(thread_id, run.id, run.required_action.submit_tool_outputs.tool_calls[0].id, success, response)
                    await message.answer(response)
                    if success:
                        await state.clear()
            elif error:
                await message.answer(error)
                await state.clear()

        elif run.status != "completed":
            raise Exception(f"Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, —Å—Ç–∞—Ç—É—Å: {run.status}")

        messages = await openai_service.client.beta.threads.messages.list(thread_id=thread_id)
        for msg in messages.data:
            if msg.role == "assistant" and msg.content[0].type == "text":
                assistant_response = msg.content[0].text.value
                logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant_response}")
                await message.answer(assistant_response)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω–Ω–æ—Å—Ç—å.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@dp.message(F.text)
async def text_handler(message: Message, state: FSMContext):
    logger.info("text handler used")
    if message.text.lower() == "–ø–æ–º–æ—â—å":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /values –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.")
    elif message.text.lower() == "–æ –±–æ—Ç–µ":
        await message.answer("–Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ OpenAI API —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.")
    elif message.text.lower() == "–º–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏":
        async with async_session() as session:
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –¥–ª—è user_id: {message.from_user.id}")
                result = await session.execute(
                    text("SELECT value FROM user_values WHERE user_id = :user_id"),
                    {"user_id": message.from_user.id}
                )
                values = result.fetchall()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è user_id {message.from_user.id}: {values}")
                if values:
                    values_list = [row[0] for row in values]
                    await message.answer(f"–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(values_list)}")
                else:
                    await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /values, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –¥–ª—è user_id {message.from_user.id}: {e}", exc_info=True)
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ /values.")

@dp.message(F.voice)
async def voice_handler(message: Message):
    logger.info("voice handler used")
    try:
        voice_file = await bot.get_file(message.voice.file_id)
        voice_data = await bot.download_file(voice_file.file_path)
        
        transcript = await openai_service.client.audio.transcriptions.create(
            file=("voice.ogg", BytesIO(voice_data.read()), "audio/ogg"),
            model="whisper-1"
        )
        user_question = transcript.text
        await message.answer(f"üé§ –í–∞—à –≤–æ–ø—Ä–æ—Å: {user_question}")

        thread = await openai_service.client.beta.threads.create()
        await openai_service.client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=user_question
        )
        
        run = await openai_service.client.beta.threads.runs.create_and_poll(
            thread_id=thread.id,
            assistant_id=config.ASSISTANT_ID
        )
        
        if run.status == "requires_action" and run.required_action and run.required_action.submit_tool_outputs:
            logger.info(f"–°—Ç–∞—Ç—É—Å requires_action, tool_calls: {run.required_action.submit_tool_outputs.tool_calls}")
            value, error = await openai_service.handle_tool_outputs(thread.id, run)
            if value:
                async with async_session() as session:
                    success, response = await save_value_to_db(session, message.from_user.id, value)
                    await openai_service.submit_tool_output(thread.id, run.id, run.required_action.submit_tool_outputs.tool_calls[0].id, success, response)
                    await message.answer(response)
            elif error:
                await message.answer(error)

        elif run.status != "completed":
            raise Exception(f"Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, —Å—Ç–∞—Ç—É—Å: {run.status}")
        
        messages = await openai_service.client.beta.threads.messages.list(thread_id=thread.id)
        assistant_response = next(m.content[0].text.value for m in messages.data if m.role == "assistant")

        speech = await openai_service.client.audio.speech.create(
            model="tts-1",
            voice="alloy",
            input=assistant_response
        )
        
        await message.answer_voice(
            types.BufferedInputFile((await speech.aread()), filename="response.mp3")
        )
        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç: {assistant_response}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    global openai_service  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    new_assistant_id = await openai_service.verify_or_create_assistant(config.ASSISTANT_ID)
    if new_assistant_id != config.ASSISTANT_ID:
        logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω ASSISTANT_ID —Å {config.ASSISTANT_ID} –Ω–∞ {new_assistant_id}")
        openai_service = OpenAIService(config.OPENAI_API_KEY)  # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å ID
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º .env
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())